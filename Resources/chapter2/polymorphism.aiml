<?xml version="1.0" encoding="UTF-8"?>
<aiml version="1.0.1">

	<!--Polymorphism
        Method overloading 
        method overriding
        super keyword
        final keyword
        runtine polymorphism
        dynamic binding -->

	<category>
		<pattern>POLYMORPHISM</pattern>
		<template>
			Polymorphism in java is a concept by which we can perform a single action by different ways. Polymorphism is derived from 2 greek words: poly and morphs. The word "poly" means many and "morphs" means forms. So polymorphism means many forms.
-, -,
			There are two types of polymorphism in java: compile time polymorphism and runtime polymorphism. We can perform polymorphism in java by method overloading and method overriding.
		</template>
	</category>

	<category>
		<pattern>METHOD OVERLOADING</pattern>
		<template>
			<think><set name="searched keywords">method overloading</set></think>
			<think><set name="more concepts">method overloading</set></think>

			A class with multiple methods having same name but different in parameters, it is known as Method Overloading.-, -,
			If we have to perform only one operation, having same name of the methods increases the readability of the program. -, -,
			Method overloading increases the readability of the program. -, -,

			Two ways of overloading the method in java:--, 
			1. By changing number of arguments-, 
			2. By changing the data type -, -,
			type "example" to see example -,
			type "more" to see more concepts related to method oveloading
		</template>
	</category>

	<category>
		<pattern>METHOD OVERRIDING</pattern>
		<template>
			<think><set name="searched keywords">method overriding</set></think>
			<think><set name="more concepts">method overriding</set></think>

			If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in java. -, -,
-, 
			In other words, If subclass provides the specific implementation of the method that has been provided by one of its parent class, it is known as method overriding.-, 
-, 
			Usage of Java Method Overriding:-, 
-, 
			1. Method overriding is used to provide specific implementation of a method that is already provided by its super class.-, 
-, 
			2. Method overriding is used for runtime polymorphism-, 
-, 
			Rules for Java Method Overriding-, 
			1. method must have same name as in the parent class-, 
			2. method must have same parameter as in the parent class.-, 
			3. must be IS-A relationship (inheritance).-, -,

			type "example" to see example-,
			type "more" to see more concepts related to method overriding
		</template>
	</category>

	<category>
		<pattern>SUPER</pattern>
		<template>
			<think><set name="searched keywords">super</set></think>

			The super keyword in java is a reference variable which is used to refer immediate parent class object.-, 
-, 
			Whenever you create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable.-, 
-, 
			Usage of java super Keyword-, 
			1. super can be used to refer immediate parent class instance variable.-, 
			2. super can be used to invoke immediate parent class method.-, 
			3. super() can be used to invoke -, immediate parent class constructor.-,

			type "example" to see example
		</template>
	</category>


	<category>
		<pattern>FINAL</pattern>
		<template>
			<think><set name="searched keywords">final</set></think>
			<think><set name="more concepts">final</set></think>
			The final keyword in java is used to restrict the user. The java final keyword can be used in many context. Final can be:-, 
-, 
			1.variable-, 
			2. method-, 
			3. class-, 
			The final keyword can be applied with the variables, a final variable that have no value it is called blank final variable or uninitialized final variable. It can be initialized in the constructor only. The blank final variable can be static also which will be initialized in the static block only. We will have detailed learning of these. Let's first learn the basics of final keyword.-, 
-, 
			type "example" to see example-,
			type "more" to see more concepts related to final keyword

		</template>
	</category>


	<category>
		<pattern>RUNTIME POLYMORPHISM</pattern>
		<template>
			<think><set name="searched keywords">runtime</set></think>

			Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time.-,
-,
			In this process, an overridden method is called through the reference variable of a superclass. The determination of the method to be called is based on the object being referred to by the reference variable.-,
-,
			Upcasting:--,
			-,
			When reference variable of Parent class refers to the object of Child class, it is known as upcasting. For example:-,
-,
			Reference 					Object-,
			variable of  ---------->   of child-,
			parent class 				class-, -,

			type "example" to see example-,
			

		</template>
	</category>

	
	<category>
		<pattern>BINDING</pattern>
		<template>
			Connecting a method call to the method body is known as binding.-, 
-, 
			There are two types of binding:--, 
-, 
			1. static binding (also known as early binding).-, 
			2. dynamic binding (also known as late binding).-, 
-, 
			static binding-, 
			When type of the object is determined at compiled time(by the compiler), it is known as static binding.-, 
-, 
			If there is any private, final or static method in a class, there is static binding.-, 
-, 
			Example of static binding-, 
			class Dog{  -, 
			 private void eat(){System.out.println("dog is eating...");}  -, 
			  -, 
			 public static void main(String args[]){  -, 
			  Dog d1=new Dog();  -, 
			  d1.eat();  -, 
			 }  -, 
			}  -, 
-, 
-, 
			Dynamic binding-, 
			When type of the object is determined at run-time, it is known as dynamic binding.-, 
-, 
			Example of dynamic binding-, 
			class Animal{  -, 
			 void eat(){System.out.println("animal is eating...");}  -, 
			}  -, 
			  -, 
			class Dog extends Animal{  -, 
			 void eat(){System.out.println("dog is eating...");}  -, 
			  -, 
			 public static void main(String args[]){  -, 
			  Animal a=new Dog();  -, 
			  a.eat();  -, 
			 }  -, 
			}
		</template>
	</category>

<!-- CONTAINS example of different topics -->
	<category>
		<pattern>EXAMPLE</pattern>
		<template>
			<condition name="searched keywords" value="method overloading">
				1. Method overloading by changing the number of arguments:-, 
				class Adder{  -, 
					static int add(int a,int b){-, 
						return a+b;-, 
					}  -, 
					static int add(int a,int b,int c){-, 
						return a+b+c;-, 
					}  -, 
				}  -, 
				class TestOverloading1{  -, 
					public static void main(String[] args){  -, 
						System.out.println(Adder.add(11,11));  -, 
						System.out.println(Adder.add(11,11,11));  -, 
					}-, 
				}  -, 
-, 
				Output:-, 
				22-, 
				33-, 
-, 
				2. Method overloading by changing data type of arguments-, 
-, 
				class Adder{  -, 
					static int add(int a, int b){-, 
						return a+b;-, 
					}  -, 
					static double add(double a, double b){-, 
						return a+b;-, 
					}  -, 
				}  -, 
				class TestOverloading2{  -, 
					public static void main(String[] args){  -, 
						System.out.println(Adder.add(11,11));  -, 
						System.out.println(Adder.add(12.3,12.6));  -, 
					}-, 
				} -, 
-, 
				Output:-, 
				22-, 
				24.9
			</condition>

			<condition name="searched keywords" value="method overriding">
				In this example, we have defined the run method in the subclass as defined in the parent class but it has some specific implementation. The name and parameter of the method is same and there is IS-A relationship between the classes, so there is method overriding.-,
-,
				class Vehicle{  -,
					void run(){-,
						System.out.println("Vehicle is running");-,
					}  -,
				}  -,
				class Bike2 extends Vehicle{  -,
					void run(){-,
						System.out.println("Bike is running safely");-,
					}  -,
				  -,
					public static void main(String args[]){  -,
						Bike2 obj = new Bike2();  -,
						obj.run();  -,
					} -,
				} -,
-,
				Output:Bike is running safely
			</condition>
			<condition name="searched keywords" value="super">
				1) super is used to refer immediate parent class instance variable.-, 
-, 
				class Animal{  -, 
					String color="white";  -, 
				}  -, 
				class Dog extends Animal{  -, 
					String color="black";  -, 
					void printColor(){  -, 
					System.out.println(color);//prints color of Dog class  -, 
					System.out.println(super.color);//prints color of Animal class  -, 
					}  -, 
				}  -, 
				class TestSuper1{  -, 
					public static void main(String args[]){  -, 
					Dog d=new Dog();  -, 
					d.printColor();  -, 
					}-, 
				}  -, 
-, 
				Output:-, 
				black-, 
				white-, 
-, 
-, 
				In the above example, Animal and Dog both classes have a common property color. If we print color property, it will print the color of current class by default. To access the parent property, we need to use super keyword.-, 
-, 
				2) super can be used to invoke parent class method-, 
-, 
				class Animal{  -, 
					void eat(){System.out.println("eating...");}  -, 
				}  -, 
				class Dog extends Animal{  -, 
					void eat(){System.out.println("eating bread...");}  -, 
					void bark(){System.out.println("barking...");}  -, 
					void work(){  -, 
					super.eat();  -, 
					bark();  -, 
					}  -, 
				}  -, 
				class TestSuper2{  -, 
					public static void main(String args[]){  -, 
					Dog d=new Dog();  -, 
					d.work();  -, 
					}-, 
				}  -, 
-, 
-, 
				Output:-, 
				eating...-, 
				barking...-, 
-, 
				In the above example Animal and Dog both classes have eat() method if we call eat() method from Dog class, it will call the eat() method of Dog class by default because priority is given to local.-, 
-, 
				To call the parent class method, we need to use super keyword.-, 
-, 
-, 
				3) super is used to invoke parent class constructor.-, 
-, 
				class Animal{  -, 
				Animal(){System.out.println("animal is created");}  -, 
				}  -, 
				class Dog extends Animal{  -, 
				Dog(){  -, 
				super();  -, 
				System.out.println("dog is created");  -, 
				}  -, 
				}  -, 
				class TestSuper3{  -, 
				public static void main(String args[]){  -, 
				Dog d=new Dog();  -, 
				}}  -, 
-, 
				Output:-, 
				animal is created-, 
				dog is created

			</condition>
			<condition name="searched keywords" value="final">
				1) Java final variable-, 
	-, 
				If you make any variable as final, you cannot change the value of final variable(It will be constant).-, 
	-, 
				example, we are going to change the value of this variable, but It can't be changed because final variable once assigned a value can never be changed.-, 
	-, 
				class Bike9{  -, 
				 final int speedlimit=90;//final variable  -, 
				 void run(){  -, 
				  speedlimit=400;  -, 
				 }  -, 
				 public static void main(String args[]){  -, 
				 Bike9 obj=new  Bike9();  -, 
				 obj.run();  -, 
				 }  -, 
				}//end of class-, 
				-, 
				output: compile time error-, 
	-, 
				2) Java final method-, 
	-, 
				If you make any method as final, you cannot override it.-, 
	-, 
				class Bike{  -, 
				  final void run(){System.out.println("running");}  -, 
				}  -, 
				     -, 
				class Honda extends Bike{  -, 
				   void run(){System.out.println("running safely with 100kmph");}  -, 
				     -, 
				   public static void main(String args[]){  -, 
				   Honda honda= new Honda();  -, 
				   honda.run();  -, 
				   }  -, 
				}  -, 
	-, 
				output: compile time error-, 
	-, 
				3) Java final class-, 
	-, 
				If you make any class as final, you cannot extend it.-, 
	-, 
				final class Bike{}  -, 
	  -, 
				class Honda1 extends Bike{  -, 
				  void run(){System.out.println("running safely with 100kmph");}  -, 
				    -, 
				  public static void main(String args[]){  -, 
				  Honda1 honda= new Honda1();  -, 
				  honda.run();  -, 
				  }  -, 
				}  -, 
	-, 
				Output:Compile Time Error
			</condition>
			<condition name="searched keywords" value="runtime">
				Consider a scenario, Bank is a class that provides method to get the rate of interest. But, rate of interest may differ according to banks. For example, SBI, ICICI and AXIS banks are providing 8.4%, 7.3% and 9.7% rate of interest.-,
-,
				class Bank{  -,
				float getRateOfInterest(){return 0;}  -,
				}  -,
				class SBI extends Bank{  -,
				float getRateOfInterest(){return 8.4f;}  -,
				}  -,
				class ICICI extends Bank{  -,
				float getRateOfInterest(){return 7.3f;}  -,
				}  -,
				class AXIS extends Bank{  -,
				float getRateOfInterest(){return 9.7f;}  -,
				}  -,
				class TestPolymorphism{  -,
				public static void main(String args[]){  -,
				Bank b;  -,
				b=new SBI();  -,
				System.out.println("SBI Rate of Interest: "+b.getRateOfInterest());  -,
				b=new ICICI();  -,
				System.out.println("ICICI Rate of Interest: "+b.getRateOfInterest());  -,
				b=new AXIS();  -,
				System.out.println("AXIS Rate of Interest: "+b.getRateOfInterest());  -,
				}  -,
				}  -,

				Output:-, 
				SBI Rate of Interest: 8.4-, 
				ICICI Rate of Interest: 7.3-, 
				AXIS Rate of Interest: 9.7
			</condition>
			
		</template>
	</category>


	<!-- More concepts about method oveloading -->
	<category>
		<pattern>MORE</pattern>
		<template>
			<condition name="more concepts" value="method overloading">
				Why Method Overloading is not possible by changing the return type of method only?-, 
-, 
				In java, method overloading is not possible by changing the return type of the method only because of ambiguity.-, 
-, 
				class Adder{  -, 
					static int add(int a,int b){return a+b;}  -, 
					static double add(int a,int b){return a+b;}  -, 
				}  -, 
				class TestOverloading3{  -, 
					public static void main(String[] args){  -, 
					System.out.println(Adder.add(11,11));//ambiguity  -, 
					}-, 
				}  -, 
-, 
				Output:--, 
				Compile Time Error: method add(int,int) is already defined in class Adder-, 
-, 
				System.out.println(Adder.add(11,11)); //Here, how can java determine which sum() method should be called?-, 
-, -,
				Can we overload java main() method?-, -,
				Yes, by method overloading. You can have any number of main methods in a class by method overloading. But JVM calls main() method which receives string array as arguments only. Let's see the simple example:-, -,

				class TestOverloading4{  -, 
					public static void main(String[] args){System.out.println("main with String[]");}  -, 
					public static void main(String args){System.out.println("main with String");}  -, 
					public static void main(){System.out.println("main without args");}  -, 
				}  -,
-,
				Output:-,
				main with String[]
			</condition>

			<condition name="more concepts" value="method overriding">
				Can we override static method?-, -,
				No, static method cannot be overridden. It can be proved by runtime polymorphism, so we will learn it later.-, 
-, 
				Why we cannot override static method?-, -,
				because static method is bound with class whereas instance method is bound with object. Static belongs to class area and instance belongs to heap area.-, 
-, 
				Can we override java main method?-, -,
				No, because main is a static method.
			</condition>

			<condition name="more concepts" value="final">
				Q) Is final method inherited?-, 
				Ans) Yes, final method is inherited but you cannot override it.-, 
-, 
				Q) What is blank or uninitialized final variable?-, 
				A final variable that is not initialized at the time of declaration is known as blank final variable.-, 
-, 
				If you want to create a variable that is initialized at the time of creating object and once initialized may not be changed, it is useful. For example PAN CARD number of an employee.-, 
-, 
				It can be initialized only in constructor.-, 
-, 
				static blank final variable-, 
				A static final variable that is not initialized at the time of declaration is known as static blank final variable. It can be initialized only in static block.-, 
-, 
				Q) What is final parameter?-, 
				If you declare any parameter as final, you cannot change the value of it.-, 
-, 
				Q) Can we declare a constructor final?-, 
				No, because constructor is never inherited.

			</condition>
		</template>
	</category>



	<!-- Bit more definition -->

	<category>
		<pattern>WHAT IS *</pattern>
		<template>
			<srai><star/></srai>
		</template>
	</category>

	<category>
		<pattern>DEFINE *</pattern>
		<template>
			<srai><star/></srai>
		</template>
	</category>

</aiml>