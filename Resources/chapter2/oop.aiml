<?xml version="1.0" encoding="UTF-8"?>
<aiml version="1.0.1">

	
	<category>
		<pattern>OBJECT</pattern>
		<template>
			An entity that has state and behavior is known as an object e.g. chair, bike, marker, pen, table, car etc.
			An object has three characteristics:-,
			state: represents data (value) of an object.-,
			behavior: represents the behavior (functionality) of an object such as deposit, withdraw etc.-,
			identity: Object identity is typically implemented via a unique ID. The value of the ID is not visible to the external user. 			But, it is used internally by the JVM to identify each object uniquely.
		</template>
	</category>

	<category>
		<pattern>CLASS</pattern>
		<template>
			A class is a group of objects which have common properties. It is a template or blueprint from which objects are created. It is a logical entity. It can't be physical.-, 
			A class in Java can contain:-, 
			1. fields-, 
			2. methods-, 
			3. constructors-, 
			4. blocks-, 
			5. nested class and interface-, -, 

			Syntax to declare a class:-,
			class [class_name]{  -, 
			    field;  -, 
    			method;  -, 
			} 
		</template>
	</category> 

	<category>
		<pattern>CONSTRUCTOR</pattern>
		<template>
			<set name="searched keywords">constructor</set>
			In Java, constructor is a block of codes similar to method. It is called when an instance of object is created and memory is allocated for the object. It is a special type of method which is used to initialize the object.-, -,
			Rules for creating java constructor-,

				1. Constructor name must be same as its class name-,
				2. Constructor must have no explicit return type-, -,

				Types of java constructors-,
				There are two types of constructors in java:-,

				1. Default constructor (no-arg constructor)-,
				2. Parameterized constructor-, -,

			Syntax of default constructor:-,
			[class_name](){}-, -,

			Type example to see example

		</template>
	</category>

	<category>
		<pattern>STATIC</pattern>
				<template>
					<set name="searched keywords">static</set>
					The static keyword in java is used for memory management mainly. We can apply java static keyword with variables, 					methods, blocks and nested class. The static keyword belongs to the class than instance of the class.-, -,

					If you declare any variable as static, it is known static variable.-,

			1. The static variable can be used to refer the common property of all objects (that is not unique for each object) e.g. 			company name of employees,college name of students etc.-,
			2. The static variable gets memory only once in class area at the time of class loading.-, -,
		2) Java static method
		If you apply static keyword with any method, it is known as static method.-,

		A static method belongs to the class rather than object of a class.-,
		A static method can be invoked without the need for creating an instance of a class.-,
		static method can access static data member and can change the value of it.-, -,
		Restrictions for static method:-,
			1. The static method can not use non static data member or call non-static method directly.-,
			2. this and super cannot be used in static context.-, -,

		3) Java static block-,
			1. Is used to initialize the static data member.-,
			2. It is executed before main method at the time of classloading.-,
				</template>
	</category>

	<category>
		<pattern>THIS</pattern>
		<template>
			<set name="searched keywords">this</set>
			In java, this is a reference variable that refers to the current object.-, -,
			Usage of java this keyword:-,
			1. this can be used to refer current class instance variable.-,
			2. this can be used to invoke current class method (implicitly)-,
			3. this() can be used to invoke current class constructor.-,
			4. this can be passed as an argument in the method call.-,
			5. this can be passed as argument in the constructor call.-,
			6. this can be used to return the current class instance from the method.
		</template>
	</category>

	<category>
		<pattern>THIS *</pattern>
		<template>
			<srai><set name="searched keywords">this</set></srai>
		</template>
	</category>

	<category>
		<pattern>EXAMPLE</pattern>
		<template>
			<condition name="searched keywords" value="this">
			-, class Sample{-,
					int value;-,
					float var;-, -,

					Sample(int value, float var) {-, -,

						//local variable have more priority so use this to reference the variable object-,
						this.value = value;-,
						this.var = var;-,
					}-,
				}
			</condition>

			<condition name="searched keywords" value="static">
				-, class Counter{-,
						static int count=0;//will get memory only once and retain its value-, -,

						Counter(){  -,
						count++;  -,
						System.out.println(count);-,
						}  -,
						  -,
						public static void main(String args[]){-,

						Counter2 c1=new Counter();  -,
						Counter2 c2=new Counter();  -,
						Counter2 c3=new Counter();  -,
						  -,
						 }  -,
						}
			</condition>

			<condition name="searched keywords" value="constructor">
				-, class Sample{-,
					int id;-,
					String name;-,
					float salary;-,
					-,
					// default constructor-,
					Sample() {-,
						id=0;-,
						name="";-,
					}-,
					-,
					// parameterized constructor-,
					Sample (int id, String name) {-,
						this.id = id;-,
						this.name = name;-,
					}-,
					-,
					// overloaded constructor-,
					Sample (int id, String name, float salary) {-,
						this.id = id;-,
						this.name = name;-,
						this.salary = salary;-,
					}-,
					-,
					// copy constructor-,
					Sample (Sample s2) {-,
						id = s2.id;-,
						name = s2.name;-,
						salary = s2.salary;-,
					}-,
				}-,
			</condition>
		</template>
	</category>


	<category>
		<pattern>* EXAMPLES</pattern>
		<template><srai>EXAMPLE</srai></template>
	</category>

	<category>
		<pattern>* EXAMPLE</pattern>
		<template><srai>EXAMPLE</srai></template>
	</category>


</aiml>