<?xml version="1.0" encoding="UTF-8"?>
<aiml version="1.0.1">

	<category>
		<pattern>INHERITANCE</pattern>
		<template>
			Inheritance in java is a mechanism in which one object acquires all the properties and behaviors of parent object.-, -,

			The idea behind inheritance in java is that you can create new classes that are built upon existing classes. When you inherit from an existing class, you can reuse methods and fields of parent class, and you can add new methods and fields also.-, -,

			Inheritance represents the IS-A relationship, also known as parent-child relationship.-, -,

			why use inheritance in java:-, 
			1. For Method Overriding (so runtime polymorphism can be achieved).-,
			2. For Code Reusability.-, -,

			Syntax of Java Inheritance:-, 

			class Subclass-name extends Superclass-name  -, 
				{  -, 
				   //methods and fields  -, 
				}  -, -,
			The extends keyword indicates that you are making a new class that derives from an existing class. The meaning of "extends" is to increase the functionality.
		</template>
	</category>
	
	<category>
		<pattern>TYPES OF INHERITANCE</pattern>
		<template>
			Single -,

			class A -, -,
			class B -, -,

			Multilevel -,

			class A -, -,
			class B -, -,
			class C -, -,

			Hierarchical -,
			class A -, -,
			class B class c -, -,

			Hybrid -,
			class A -, -,
			class B class c -, -,
			class D -, -,

			Note: Multiple inheritance is not supported in java through class.			
		</template>
	</category>


	<category>
		<pattern>EXAMPLE</pattern>
		<template>
			<condition name="searched keywords" value="single">
				class Animal{   -,
				void eat(){ -,
					System.out.println("eating..."); -,
					}   -,
				} -,
 -,
				class Dog extends Animal{   -,
				void bark() -,
				{ -,
					System.out.println("barking...");}   -,
				} -,
 -,
				class TestInheritance{   -,
				public static void main(String args[]){   -,
					Dog d=new Dog();   -,
					d.bark();   -,
					d.eat();   -,
					} -,
				} -, -,

				Output:-,
				barking...-,
				eating...-,
			</condition>

			<condition name="searched keywords" value="multilevel">
				class Animal{  -, 
					void eat(){-, 
					System.out.println("eating...");-, 
					}  -, 
				}  -, 
-, 
				class Dog extends Animal{  -, 
					void bark(){-, 
					System.out.println("barking...");-, 
					}  -, 
				} -, 
-, 
				class BabyDog extends Dog{  -, 
					void weep(){-, 
					System.out.println("weeping...");-, 
					}  -, 
				}  -, 
-, 
				class TestInheritance2{  -, 
					public static void main(String args[]){  -, 
					BabyDog d=new BabyDog();  -, 
					d.weep();  -, 
					d.bark();  -, 
					d.eat();  -, 
					}-, 
				}  -, -,

				Output:-,
				weeping...-,
				barking...-,
				eating...
			</condition>

			<condition name="searched keywords" value="hierarchical">
				class Animal{  -, 
					void eat(){-, 
					System.out.println("eating...");-, 
					}  -, 
				}  -, 
-, 
				class Dog extends Animal{  -, 
					void bark(){-, 
					System.out.println("barking...");-, 
					}  -, 
				}  -, 
-, 
				class Cat extends Animal{  -, 
					void meow(){-, 
					System.out.println("meowing...");-, 
					}  -, 
				}  -, 
				-, 
				class TestInheritance3{  -, 
					public static void main(String args[]){  -, 
					Cat c=new Cat();  -, 
					c.meow();  -, 
					c.eat();  -, 
					//c.bark();-, 
					}-, 
				} -, -,

				Output:-,
				meowing...-,
				eating...
			</condition>  

			<condition name="searched keywords" value="aggregation">

				public class Address {  -, 
					String city,state,country;  -, 
					  -, 
					public Address(String city, String state, String country) {  -, 
					    this.city = city;  -, 
					    this.state = state;  -, 
					    this.country = country;  -, 
					}  -, 
  -, 
				}  -, 
-, 
				public class Emp {  -, 
					int id;  -, 
					String name;  -, 
					Address address;  -, 
					  -, 
					public Emp(int id, String name,Address address) {  -, 
					    this.id = id;  -, 
					    this.name = name;  -, 
					    this.address=address;  -, 
					}  -, 
					  -, 
					void display(){  -, 
						System.out.println(id+" "+name);  -, 
						System.out.println(address.city+" "+address.state+" "+address.country);  -, 
					}  -, 
					  -, 
					public static void main(String[] args) {  -, 
						Address address1=new Address("gzb","UP","india");  -, 
						Address address2=new Address("gno","UP","india");  -, 
						  -, 
						Emp e=new Emp(111,"varun",address1);  -, 
						Emp e2=new Emp(112,"arun",address2);  -, 
						      -, 
						e.display();  -, 
						e2.display();  -, 
						      -, 
						}  -, 
				} -, 
-, 
				Output:-, 
				111 varun-, 
		        gzb UP india-, 
		        112 arun-, 
		        gno UP india       
			</condition>
		</template>
	</category>

	<category>
		<pattern>* INHERITANCE EXAMPLE</pattern>
		<template>
			<think><set name="searched keywords"><star/></set></think>
			<srai>EXAMPLE</srai>
		</template>
	</category>

	<category>
		<pattern>MULTIPLE INHERITANCE</pattern>
		<template>
			To reduce the complexity and simplify the language, multiple inheritance is not supported in java.-, -,

			Consider a scenario where A, B and C are three classes. The C class inherits A and B classes. If A and B classes have same method and you call it from child class object, there will be ambiguity to call method of A or B class.-, -,

			Since compile time errors are better than runtime errors, java renders compile time error if you inherit 2 classes. So whether you have same method or different, there will be compile time error now.-, -,

			class A{  -, 
				void msg(){-, 
				System.out.println("Hello");-, 
				}  -, 
			}  -, 
			class B{  -, 
				void msg(){-, 
				System.out.println("Welcome");-, 
				}  -, 
			}  -, 
			class C extends A,B{//suppose if it were  possible-, 
			   -, 
				Public Static void main(String args[]){  -, 
				   C obj=new C();  -, 
				   obj.msg();//Now which msg() method would be invoked?  -, 
				}  -, 
			} -, 
-, 
			Output:-, 
			compile time error
		</template>
	</category>
	
	<category>
		<pattern>* MULTIPLE INHERITANCE</pattern>
		<template>
			<srai>MULTIPLE INHERITANCE</srai>
		</template>
	</category>

	<category>
		<pattern>* MULTIPLE INHERITANCE *</pattern>
		<template>
			<srai>MULTIPLE INHERITANCE</srai>
		</template>
	</category>

	<category>
		<pattern>AGGREGATION</pattern>
		<template>
			<think><set name="searched keywords">aggregation</set></think>
			If a class have an entity reference, it is known as Aggregation. Aggregation represents HAS-A relationship. It's mainly used for code reusability.-, -,

			Consider a situation, Employee object contains many informations such as id, name, emailId etc. It contains one more object named address, which contains its own informations such as city, state, country, zipcode etc. as given below. -, -,
			
			class Address{-, 
				String state;-, 
				String country;-, 
				int zipcode;-, 
				...-, 
			}-, 
			class Employee{  -, 
				int id;  -, 
				String name;  -, 
				Address address;//Address is a class  -, 
				...  -, 
			} 

			write "example" to show an example

		</template>
	</category>


</aiml>